#!/bin/bash


# (O)ne (S)hot (D)ocker Commands
# 2023 by Robert Degen

uname | grep -i darwin >/dev/null 2>/dev/null
mactest=$?
OPTS="--add-host=host.docker.internal:host-gateway"

SEDCOMMAND=sed
if [[ $mactest = 0 ]]; then
    SEDCOMMAND=gsed
    OPTS=""
fi


if [[ -z $1 ]]; then
    cat <<"EOF"
===============================================================================
osd WRITTEN BY ROBERT DEGEN (C) 2023 ALL RIGHTS RESERVED. THIS IS FREE SOFTWARE
===============================================================================

For creation of docker containers, make sure you have already something like...
  echo OSD_ENV_DTAG="u/a" >~/.osd_env
to make the wrappers work correctly!

Available commands:

BUILDING

    osd multi ........... Create docker toolchain/builder for xbuild in order
                          to build multi arch containers

    osd slim ............ Create a debian 12 based Dockerfile in CWD with some
                          helpers and predefined standard values

    osd wpdev ........... Create a wordpress custom image



SERVING

    osd mysql ........... Create a mysql-8 server on port 33060 with login
                          root:foo123 in CWD


EOF
    exit 1
fi


if [[ ! -f ~/.osd_env ]]; then
    echo ".osd_env missing in user home"
    echo "do at least:"
    echo 'echo OSD_ENV_DTAG="u/a" >~/.osd_env'
    exit 1
fi


. ~/.osd_env

# special way


mk_docker_scripts() {
    funky_tag=$1
    funky_dir="."

    echo -en "#!/bin/bash\n\n\ndocker build -t $funky_tag .\n"                  >$funky_dir/DOCKER_BUILD.sh
    echo -en "#!/bin/bash\n\n\ndocker build --no-cache -t $funky_tag .\n"       >$funky_dir/DOCKER_BUILD_NOCACHE.sh
    echo -en "#!/bin/bash\n\n\ndocker run --rm -v \$PWD:/work -it $funky_tag\n" >$funky_dir/DOCKER_RUN.sh
    echo -en "#!/bin/bash\n\n\ndocker run --rm -v \$PWD:/work -it $funky_tag /bin/bash\n" >$funky_dir/DOCKER_RUN_BASH.sh
    echo -en "#!/bin/bash\n\n\ndocker push $funky_tag\n"                        >$funky_dir/DOCKER_PUSH.sh

    echo -en "#!/bin/bash\n\n\ndocker buildx build --platform linux/arm64,linux/amd64 -t $funky_tag .\n"             >$funky_dir/X_DOCKER_BUILD_ALL.sh
    echo -en "#!/bin/bash\n\n\ndocker buildx build --platform linux/arm64,linux/amd64 --no-cache -t $funky_tag .\n"  >$funky_dir/X_DOCKER_BUILD_NOCACHE.sh
    echo -en "#!/bin/bash\n\n\ndocker buildx build --platform linux/arm64,linux/amd64 --push -t $funky_tag .\n"      >$funky_dir/X_DOCKER_PUSH.sh
    echo -en "#!/bin/bash\n\n\ndocker buildx build --load -t $funky_tag .\n"      >$funky_dir/X_DOCKER_BUILD_HERE.sh

    ( cd $funky_dir && chmod a+x *.sh )

}


# make scripts
if [[ $1 = mks ]]; then
    if [[ -f DTAG ]]; then
        DTAG=$(head -1 DTAG)
        echo "creating docker scripting for $DTAG..."
        mk_docker_scripts "$DTAG"
        exit 0
    else
        echo "no DTAG found"
        exit 1
    fi
    exit 0
fi














if [[ $1 = slim ]]; then
    
    if [[ ! -z $2 ]]; then
        echo -en `echo $OSD_ENV_DTAG | cut -d '/' -f 1 | tr -d '\n'` >DTAG
        echo "/$2" >>DTAG
    fi

    if [[ ! -f DTAG ]]; then
        echo $OSD_ENV_DTAG >DTAG
    fi

    mk_docker_scripts "\`cat DTAG\`"
    mkdir src

    cat >src/startup.sh <<EOF
#!/bin/bash


#. /venv/bin/activate

#python -m PYMOD -u
#python -m PYMOD

echo "startup.sh not customized yet!"
read
#cd /app && python -u -m YOUR_MODULE
EOF

    chmod a+x src/startup.sh


    cat >Dockerfile <<"EOF"
FROM debian:bookworm-slim

WORKDIR /work

ENV DEBIAN_FRONTEND=noninteractive

ARG TARGETPLATFORM

ARG BUILDPLATFORM

RUN apt update && apt upgrade -y

RUN apt install -y mc less netcat-openbsd emacs-nox

#RUN apt install -y dialog python3 python3-pip python3-venv build-essential

RUN echo "$TARGETPLATFORM" >/platform

#RUN if [ "$TARGETPLATFORM" = "linux/arm64" ]; then echo arm | tee -a ../ap; fi

#RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then echo x86 | tee -a ../ap; fi

#RUN cd / && python3 -m venv venv

#RUN . /venv/bin/activate && pip install rich requests pandas openpyxl pythondialog reportlab

#COPY src/PYMOD /venv/lib/python3.11/site-packages/PYMOD

COPY src/startup.sh /startup.sh

CMD [ "/bin/bash", "/startup.sh" ]

EOF


    WRAPPERNAME=${2:-generic_wrapper}
    # tag actual
    TA=$(cat DTAG)
    cat DOCKER_RUN.sh | $SEDCOMMAND "s|\`cat DTAG\`|$TA \"\$\@\"|g" >$WRAPPERNAME
    chmod a+x $WRAPPERNAME

    exit 0

fi # slim end




if [[ $1 = wpdev ]]; then
    
    if [[ ! -z $2 ]]; then
        echo -en `echo $OSD_ENV_DTAG | cut -d '/' -f 1 | tr -d '\n'` >DTAG
        echo "/$2" >>DTAG
    fi

    if [[ ! -f DTAG ]]; then
        echo $OSD_ENV_DTAG >DTAG
    fi

    mk_docker_scripts "\`cat DTAG\`"
    mkdir src

    cat >src/startup.sh <<EOF
#!/bin/bash


#. /venv/bin/activate

#python -m PYMOD -u
#python -m PYMOD

echo "startup.sh not customized yet!"
read
#cd /app && python -u -m YOUR_MODULE
EOF

    chmod a+x src/startup.sh


    cat >Dockerfile <<"EOF"
FROM wordpress:apache

EOF



    exit 0

fi # wpdev end












if [[ $1 = deb ]]; then
    
    if [[ ! -f DTAG ]]; then
        echo $OSD_ENV_DTAG >DTAG
    fi

    mk_docker_scripts "\`cat DTAG\`"
    mkdir src

    cat >src/startup.sh <<EOF
#!/bin/bash


echo "startup.sh not customized yet!"
read
#cd /app && python -u -m YOUR_MODULE
EOF

    chmod a+x src/startup.sh


    cat >Dockerfile <<"EOF"
FROM python:3

RUN apt update && apt upgrade -y

WORKDIR /app

RUN apt install -y mc less netcat-openbsd emacs-nox python3 python3-pip

RUN pip3 install rich requests

#COPY src/$DOCKER_APP_NAME/. /app/$DOCKER_APP_NAME
COPY src/startup.sh /startup.sh

CMD [ "/bin/bash", "/startup.sh" ]

EOF


fi





















# standard way



D=.

if [[ ! -z $2 ]]; then
    D="$2"
fi



if [[ $1 = mysql ]]; then
    set -x
    ( cd $D && docker run --rm -e MYSQL_ROOT_PASSWORD=foo123 -d -v `pwd`:/var/lib/mysql --name mysql -p 33060:3306 $OPTS mysql:8 )
    set +x
    #docker logs -f mysql
    echo "mysql root:foo123 on 127.0.0.1:33060 or host.docker.internal:33060"
    echo ""
    echo "You can run..."
    echo "docker logs -f mysql"
    echo "docker stop mysql"
    echo 'mysql -u root -p --password=foo123 -h 127.0.0.1 -P 33060 "$@"'
    exit 0
fi

if [[ $1 = mysqltestdb ]]; then
    set -x
    ( cd $D && docker run --rm -e MYSQL_DATABASE=testdb -e MYSQL_ROOT_PASSWORD=foo123 -d -v `pwd`:/var/lib/mysql --name mysql -p 3306:3306 $OPTS mysql:8 )
    set +x
    #docker logs -f mysql
    echo "mysql root:foo123 on 127.0.0.1:3306 or host.docker.internal:3306"
    echo ""
    echo "You can run..."
    echo "docker logs -f mysql"
    echo "docker stop mysql"
    echo 'mysql -u root -p --password=foo123 -h 127.0.0.1 -P 33060 "$@"'
    exit 0
fi

if [[ $1 = firefox || $1 = ff ]]; then
    set -x
    ( cd $D && docker run --rm -d --name firefox --shm-size 2g -p 7900:7900 -p 4444:4444 -e SCREEN_WIDTH=1920 -e SCREEN_HEIGHT=1080 $OPTS selenium/standalone-firefox:latest )
    set +x
    echo "docker logs -f firefox"
    echo "docker stop firefox"
    exit 0
fi

if [[ $1 = chrome || $1 = ch ]]; then
    set -x
    ( cd $D && docker run --rm -d --name chrome --shm-size 2g -p 7900:7900 -p 4444:4444 -e SCREEN_WIDTH=1920 -e SCREEN_HEIGHT=1080 $OPTS selenium/standalone-chrome:latest )
    set +x
    echo "docker logs -f chrome"
    echo "docker stop chrome"
    exit 0
fi

if [[ $1 = redis || $1 = re ]]; then
    set -x
    ( cd $D && docker run --rm -d --name redis -p 6379:6379 $OPTS redis:latest )
    set +x
    echo "redis on 127.0.0.1:6379 or host.docker.internal:6379"
    exit 0
fi

if [[ $1 = multi ]]; then
    set -x
    docker buildx create --name mybuilder
    docker buildx use mybuilder
    docker buildx inspect --bootstrap
    set +x
    echo "take a look at https://www.docker.com/blog/multi-arch-images/"
    exit 0
fi

if [[ $1 = jenkins ]]; then
    echo "jenkins here?"
    read
    set -x
    ( cd $D && docker run -d --rm --name jenkins -p 8080:8080 -v `pwd`:/var/jenkins_home jenkins/jenkins:lts-jdk11 )
    set +x
    echo "take a look at http://127.0.0.1:8080/"
    exit 0
fi

if [[ $1 = wordpress ]]; then
    DBSTUFF="-e WORDPRESS_DB_HOST=host.docker.internal -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=foo123 -e WORDPRESS_DB_NAME=testdb"
    set -x
    ( cd $D && docker run $OPTS -d --rm --name wordpress -p 8080:80 -v `pwd`:/var/www/html $DBSTUFF wordpress )
    set +x
    docker logs -f wordpress
    exit 0
fi

if [[ $1 = turbopress ]]; then

    if [[ ! -d www ]]; then
        mkdir www
    fi

    ( cd $D && docker run --name wordpress -d -p 8080:80 -v `pwd`/www:/var/www/html -it --rm -e WORDPRESS_DB_HOST=host.docker.internal -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=foo123 -e WORDPRESS_DB_NAME=testdb turbobert/wordpress )
    docker logs -f wordpress

    exit 0
fi

if [[ $1 = turbophpwww ]]; then

##    cat >Dockerfile <<"EOF"
##FROM php:8-apache
##
##ENV DEBIAN_FRONTEND=noninteractive
##
##ARG TARGETPLATFORM
##
##ARG BUILDPLATFORM
##
##RUN apt update && apt upgrade -y
##
##RUN apt install -y mc less netcat-openbsd emacs-nox
##
##RUN docker-php-ext-install pdo pdo_mysql
##
##RUN echo "$TARGETPLATFORM" >/platform
##EOF


    exit 0
fi

if [[ $1 = cli ]]; then
    cat cli.csv
    exit 0
fi

